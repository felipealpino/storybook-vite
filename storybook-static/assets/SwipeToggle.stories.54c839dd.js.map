{"version":3,"file":"SwipeToggle.stories.54c839dd.js","sources":["../../src/components/SwipeToggle/styles.ts","../../src/components/SwipeToggle/index.tsx"],"sourcesContent":["import { colorGet } from \"../../shared/utils/colorGet\";\nimport { ISwipeToggle } from \"../../components/SwipeToggle\";\nimport styled from \"styled-components\";\n\ntype ISwipeToggleProps = ISwipeToggle & {\n  statusCheck: boolean;\n};\n\nexport const SwipeToggleContainer = styled.label<ISwipeToggleProps>`\n  position: relative;\n  display: inline-block;\n  width: 52px;\n  height: 32px;\n\n  input {\n    opacity: 0;\n    width: 0;\n    height: 0;\n  }\n\n  .slider {\n    position: absolute;\n    cursor: ${({ disabled }) => (disabled ? \"not-allowed\" : \"pointer\")};\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: ${({ statusCheck, status, outline }) =>\n      statusCheck && !outline\n        ? colorGet(status, 500)\n        : statusCheck && outline\n        ? colorGet(status, 400)\n        : \"rgba(143, 155, 179, 0.16)\"};\n    border: ${({ statusCheck, status, outline }) =>\n      statusCheck && !outline\n        ? `1px solid ${colorGet(status, 500)}`\n        : statusCheck && outline\n        ? `1px solid ${colorGet(status, 600)}`\n        : \"1px solid rgba(143, 155, 179, 1)\"};\n    border-radius: ${({ rounded }) => (rounded ? \"100px\" : \"4px\")};\n    transition: 0.6s ease all;\n    opacity: ${({ disabled }) => (disabled ? \"0.5\" : \"1\")};\n  }\n\n  .center-ball {\n    position: absolute;\n    content: \"\";\n    height: 28px;\n    width: 28px;\n    background-color: white;\n    transition: 0.4s;\n    border-radius: ${({ rounded }) => (rounded ? \"100px\" : \"4px\")};\n    margin: 1px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: ${({ disabled }) => (disabled ? \"not-allowed\" : \"pointer\")};\n\n    ${({ statusCheck }) =>\n      statusCheck && \"-webkit-transform: translateX(20px)\"};\n    ${({ statusCheck }) => statusCheck && \" -ms-transform: translateX(20px)\"};\n    ${({ statusCheck }) => statusCheck && \"transform: translateX(20px)\"};\n\n    svg {\n      width: 20px;\n      height: 20px;\n      color: ${({ status, statusCheck }) =>\n        statusCheck ? colorGet(status, 500) : colorGet(\"danger\", 500)};\n    }\n\n    .animated-icon-div {\n      width: 18px;\n      height: 18px;\n      position: relative;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      transition: 0.4;\n\n      .animated-icon {\n        background-color: ${({ status, statusCheck }) =>\n          statusCheck ? colorGet(status, 500) : colorGet(\"danger\", \"500\")};\n        height: 1.5px;\n        width: 12px;\n        border-radius: 8px;\n        transform: ${({ statusCheck }) =>\n          statusCheck ? \"rotate(-45deg)\" : \"rotate(45deg)\"};\n        position: absolute;\n        right: ${({ statusCheck }) => (statusCheck ? \"0px\" : \"unset\")};\n        transition: 0.4s;\n\n        &::after {\n          content: \"\";\n          background-color: ${({ statusCheck, status }) =>\n            statusCheck ? colorGet(status, 500) : colorGet(\"danger\", \"500\")};\n          position: absolute;\n          height: 1.5px;\n          width: ${({ statusCheck }) => (statusCheck ? \"6px\" : \"12px\")};\n          border-radius: ${({ statusCheck }) =>\n            statusCheck ? \"8px 0px 0px 8px\" : \"8px\"};\n          transform: rotate(90deg);\n          left: ${({ statusCheck }) => (statusCheck ? \"-2.2px\" : \"unset\")};\n          bottom: ${({ statusCheck }) => (statusCheck ? \"3px\" : \"unset\")};\n          transition: 0.4s;\n        }\n      }\n    }\n  }\n`;\n","import React, { useRef, useState, useEffect, useCallback } from \"react\";\n\nimport { IconBaseProps } from \"react-icons\";\n\nimport { ElementStatus } from \"../../shared/theme/colors\";\n\nimport { SwipeToggleContainer } from \"./styles\";\n\nexport interface ISwipeToggle {\n  rounded?: boolean;\n  animatedIcon?: boolean;\n  status: ElementStatus;\n  outline?: boolean;\n  disabled?: boolean;\n  isChecked?: boolean;\n  handleOnChange?: (stateCheckButton: boolean) => void;\n  className?: string;\n}\n\nconst SwipeToggle: React.FC<ISwipeToggle> = ({ handleOnChange, ...props }) => {\n  const [statusCheck, setStatusCheck] = useState<boolean>(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const handleChangeInput = useCallback(() => {\n    if (handleOnChange) handleOnChange(statusCheck);\n  }, [handleOnChange, statusCheck]);\n\n  useEffect(() => {\n    setStatusCheck(props.isChecked || false);\n  }, [props.isChecked]);\n\n  return (\n    <SwipeToggleContainer\n      {...props}\n      className={`swipe-toggle-container ${props.className || \"\"}`}\n      statusCheck={statusCheck}\n    >\n      <input type=\"checkbox\" ref={inputRef} onChange={handleChangeInput} />\n      <span\n        className=\"slider\"\n        onClick={() => !props.disabled && setStatusCheck(!statusCheck)}\n      >\n        <div className=\"center-ball\">\n          {props.animatedIcon && (\n            <div className=\"animated-icon-div\">\n              <div className=\"animated-icon\"></div>\n            </div>\n          )}\n        </div>\n      </span>\n    </SwipeToggleContainer>\n  );\n};\n\nexport { SwipeToggle };\n"],"names":["SwipeToggleContainer","styled","disabled","statusCheck","status","outline","colorGet","rounded","SwipeToggle","handleOnChange","setStatusCheck","useState","inputRef","useRef","handleChangeInput","useCallback","useEffect","props","_jsxs","_jsx"],"mappings":"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"}